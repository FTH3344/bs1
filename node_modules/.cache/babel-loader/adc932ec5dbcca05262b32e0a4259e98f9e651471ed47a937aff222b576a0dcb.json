{"ast":null,"code":"var _jsxFileName = \"D:\\\\beisong\\\\my-react-app\\\\src\\\\p1.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { Upload, Button, message, Spin } from 'antd';\nimport { UploadOutlined } from '@ant-design/icons';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst P1 = () => {\n  _s();\n  const [fileContent, setFileContent] = useState('');\n  const [loading, setLoading] = useState(false);\n  const handleBeforeUpload = file => {\n    const isTxt = file.type === 'text/plain';\n    if (!isTxt) {\n      message.error('You can only upload text files!');\n      return false;\n    }\n    return isTxt;\n  };\n  const handleFileChange = info => {\n    if (info.file.status === 'uploading') {\n      setLoading(true);\n    }\n    if (info.file.status === 'done') {\n      const reader = new FileReader();\n      reader.onload = e => {\n        const content = e.target.result;\n        setFileContent(content);\n        setLoading(false);\n      };\n      reader.readAsText(info.file.originFileObj);\n    } else if (info.file.status === 'error') {\n      setLoading(false);\n      message.error('File upload failed.');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Upload, {\n      beforeUpload: handleBeforeUpload,\n      onChange: handleFileChange,\n      accept: \".txt\",\n      showUploadList: false,\n      children: /*#__PURE__*/_jsxDEV(Button, {\n        icon: /*#__PURE__*/_jsxDEV(UploadOutlined, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 23\n        }, this),\n        children: \"Click to Upload\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginTop: '20px'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"File Content:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 9\n      }, this), loading ? /*#__PURE__*/_jsxDEV(Spin, {\n        tip: \"Loading...\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            padding: '20px'\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(\"pre\", {\n        children: fileContent\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 5\n  }, this);\n};\n_s(P1, \"M0S1MI6dCB5lT55y1DdGJuMbnHQ=\");\n_c = P1;\nexport default P1;\nvar _c;\n$RefreshReg$(_c, \"P1\");","map":{"version":3,"names":["React","useState","Upload","Button","message","Spin","UploadOutlined","jsxDEV","_jsxDEV","P1","_s","fileContent","setFileContent","loading","setLoading","handleBeforeUpload","file","isTxt","type","error","handleFileChange","info","status","reader","FileReader","onload","e","content","target","result","readAsText","originFileObj","children","beforeUpload","onChange","accept","showUploadList","icon","fileName","_jsxFileName","lineNumber","columnNumber","style","marginTop","tip","padding","_c","$RefreshReg$"],"sources":["D:/beisong/my-react-app/src/p1.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport { Upload, Button, message, Spin } from 'antd';\r\nimport { UploadOutlined } from '@ant-design/icons';\r\n\r\n\r\nconst P1 = () => {\r\n  const [fileContent, setFileContent] = useState('');\r\n  const [loading, setLoading] = useState(false);\r\n\r\n\r\n  const handleBeforeUpload = (file) => {\r\n    const isTxt = file.type === 'text/plain';\r\n    if (!isTxt) {\r\n      message.error('You can only upload text files!');\r\n      return false;\r\n    }\r\n    return isTxt;\r\n  };\r\n\r\n\r\n  const handleFileChange = (info) => {\r\n    if (info.file.status === 'uploading') {\r\n      setLoading(true);\r\n    }\r\n    if (info.file.status === 'done') {\r\n      const reader = new FileReader();\r\n      reader.onload = (e) => {\r\n        const content = e.target.result;\r\n        setFileContent(content);\r\n        setLoading(false);\r\n      };\r\n      reader.readAsText(info.file.originFileObj);\r\n    } else if (info.file.status === 'error') {\r\n      setLoading(false);\r\n      message.error('File upload failed.');\r\n    }\r\n  };\r\n\r\n\r\n  return (\r\n    <div>\r\n      <Upload\r\n        beforeUpload={handleBeforeUpload}\r\n        onChange={handleFileChange}\r\n        accept=\".txt\"\r\n        showUploadList={false}\r\n      >\r\n        <Button icon={<UploadOutlined />}>Click to Upload</Button>\r\n      </Upload>\r\n      <div style={{ marginTop: '20px' }}>\r\n        <h3>File Content:</h3>\r\n        {loading? (\r\n          <Spin tip=\"Loading...\">\r\n            <div style={{ padding: '20px' }} />\r\n          </Spin>\r\n        ) : (\r\n          <pre>{fileContent}</pre>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\n\r\nexport default P1;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}