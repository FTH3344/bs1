{"ast":null,"code":"var _jsxFileName = \"D:\\\\beisong\\\\my-react-app\\\\src\\\\p1.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport { Upload, Button, message, Row, Typography } from \"antd\";\nimport { UploadOutlined } from \"@ant-design/icons\";\nimport TextArea from \"antd/es/input/TextArea\";\nimport { shuffle } from \"lodash\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst {\n  Text\n} = Typography;\nconst P1 = () => {\n  _s();\n  const [textareaContent, setTextareaContent] = useState(\"\");\n  const [sentences, setSentences] = useState([]);\n  const [answers, setAnswers] = useState([]);\n  const [displayedContent, setDisplayedContent] = useState(\"\");\n\n  // 处理文本区域内容的变化\n  const handleTextareaChange = e => {\n    setTextareaContent(e.target.value);\n  };\n\n  // 处理生成内容的按钮点击事件\n  const handleGenerateClick = () => {\n    const lines = textareaContent.split(\"\\n\");\n    const sentenceArray = [];\n    const answerArray = [];\n    let index = 0;\n\n    // 处理每个成语的部分\n    for (let i = 0; i < lines.length; i++) {\n      const line = lines[i].trim();\n      if (line) {\n        if (line.includes(\"成语\")) {\n          const parts = line.split(\" \");\n          const shuffledParts = shuffle(parts);\n          sentenceArray.push(shuffledParts.join(\" \"));\n          answerArray.push(parts);\n        } else {\n          sentenceArray.push(line);\n        }\n      }\n    }\n\n    // 打乱句子顺序\n    const shuffledSentences = shuffle(sentenceArray);\n    const finalContent = shuffledSentences.join(\"\\n\");\n    setSentences(shuffledSentences);\n    setAnswers(answerArray);\n    setDisplayedContent(finalContent);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(TextArea, {\n      value: textareaContent,\n      onChange: handleTextareaChange,\n      placeholder: \"\\u8F93\\u5165\\u6587\\u672C\\u5185\\u5BB9\\uFF0C\\u6309\\u7167\\u683C\\u5F0F\\u8981\\u6C42\\u8F93\\u5165\",\n      autoSize: {\n        minRows: 3,\n        maxRows: 10\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      onClick: handleGenerateClick,\n      children: \"\\u751F\\u6210\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginTop: 20\n      },\n      children: /*#__PURE__*/_jsxDEV(Text, {\n        children: displayedContent\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 51,\n    columnNumber: 5\n  }, this);\n};\n_s(P1, \"X4h+rL9/Y2cgZOrxOCSW/c09/JU=\");\n_c = P1;\nexport default P1;\nvar _c;\n$RefreshReg$(_c, \"P1\");","map":{"version":3,"names":["React","useState","Upload","Button","message","Row","Typography","UploadOutlined","TextArea","shuffle","jsxDEV","_jsxDEV","Text","P1","_s","textareaContent","setTextareaContent","sentences","setSentences","answers","setAnswers","displayedContent","setDisplayedContent","handleTextareaChange","e","target","value","handleGenerateClick","lines","split","sentenceArray","answerArray","index","i","length","line","trim","includes","parts","shuffledParts","push","join","shuffledSentences","finalContent","children","onChange","placeholder","autoSize","minRows","maxRows","fileName","_jsxFileName","lineNumber","columnNumber","onClick","style","marginTop","_c","$RefreshReg$"],"sources":["D:/beisong/my-react-app/src/p1.js"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport { Upload, Button, message, Row, Typography } from \"antd\";\r\nimport { UploadOutlined } from \"@ant-design/icons\";\r\nimport TextArea from \"antd/es/input/TextArea\";\r\nimport { shuffle } from \"lodash\";\r\nconst { Text } = Typography;\r\n\r\nconst P1 = () => {\r\n  const [textareaContent, setTextareaContent] = useState(\"\");\r\n  const [sentences, setSentences] = useState([]);\r\n  const [answers, setAnswers] = useState([]);\r\n  const [displayedContent, setDisplayedContent] = useState(\"\");\r\n\r\n  // 处理文本区域内容的变化\r\n  const handleTextareaChange = (e) => {\r\n    setTextareaContent(e.target.value);\r\n  };\r\n\r\n  // 处理生成内容的按钮点击事件\r\n  const handleGenerateClick = () => {\r\n    const lines = textareaContent.split(\"\\n\");\r\n    const sentenceArray = [];\r\n    const answerArray = [];\r\n    let index = 0;\r\n\r\n    // 处理每个成语的部分\r\n    for (let i = 0; i < lines.length; i++) {\r\n      const line = lines[i].trim();\r\n      if (line) {\r\n        if (line.includes(\"成语\")) {\r\n          const parts = line.split(\" \");\r\n          const shuffledParts = shuffle(parts);\r\n          sentenceArray.push(shuffledParts.join(\" \"));\r\n          answerArray.push(parts);\r\n        } else {\r\n          sentenceArray.push(line);\r\n        }\r\n      }\r\n    }\r\n\r\n    // 打乱句子顺序\r\n    const shuffledSentences = shuffle(sentenceArray);\r\n    const finalContent = shuffledSentences.join(\"\\n\");\r\n    setSentences(shuffledSentences);\r\n    setAnswers(answerArray);\r\n    setDisplayedContent(finalContent);\r\n  };\r\n\r\n\r\n  return (\r\n    <div>\r\n      <TextArea\r\n        value={textareaContent}\r\n        onChange={handleTextareaChange}\r\n        placeholder=\"输入文本内容，按照格式要求输入\"\r\n        autoSize={{ minRows: 3, maxRows: 10 }}\r\n      />\r\n      <Button onClick={handleGenerateClick}>生成</Button>\r\n      <div style={{ marginTop: 20 }}>\r\n        <Text>{displayedContent}</Text>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default P1;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}